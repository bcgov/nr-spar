name: .Deploy

on:
  workflow_call:
    inputs:
      ### Required
      tag:
        description: GitHub package tag; e.g. PR number or PROD
        required: false
        type: string

      target:
        description: Deployment target; e.g. PR number, test or prod
        required: true
        type: string

      ### Typical / recommended
      environment:
        description: GitHub environment; omit for PRs
        required: false
        type: string

      parameters:
        description: Template parameters/variables to pass (e.g. -p ZONE=...)
        required: false
        type: string

      triggers:
        description: Bash array to diff for build triggering; omit to always fire
        required: false
        type: string
      
      verify:
        description: Run the cronjob and verify results?  [true|false]
        required: false
        type: boolean
        default: true

env:
  CRONJOB: ${{ github.event.repository.name }}-${{ inputs.target }}-sync
  JOB_JOB: ${{ github.event.repository.name }}-${{ inputs.target }}-sync-${{ github.run_number }}

jobs:
  deploy:
    name: Deploy
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Database and Init
        uses: bcgov-nr/action-deployer-openshift@v2.2.0
        with:
          file: database/openshift.deploy.yml
          oc_namespace: ${{ secrets.OC_NAMESPACE }}
          oc_server: ${{ vars.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: false
          parameters:
            -p ZONE=${{ inputs.target }} -p TAG=${{ inputs.tag }}
            -p ORACLE_PASSWORD='${{ secrets.ORACLE_PASSWORD }}'
            -p ORACLE_USER='${{ vars.ORACLE_USER }}'
          triggers: ('database/' 'sync/')

      - name: Sync
        uses: bcgov-nr/action-deployer-openshift@v2.2.0
        with:
          file: sync/openshift.deploy.yml
          oc_namespace: ${{ secrets.OC_NAMESPACE }}
          oc_server: ${{ vars.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          oc_version: 4.13
          overwrite: true
          parameters: -p ZONE=${{ inputs.target }} -p TAG=${{ inputs.tag }}
          post_rollout: oc create job ${{ env.JOB_JOB }} --from=cronjob/${{ env.CRONJOB }}
          triggers: ('database/' 'sync/')

  verify:
    name: Verify
    if: inputs.verify == true
    environment: ${{ inputs.environment }}
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Verify
        run: |
          # Check job logs

          # Login
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ secrets.oc_namespace }} #Safeguard!

          # Follow
          oc wait --for=jsonpath='{.status.failed}'=4 job/${{ env.JOB_JOB }} --timeout=1m || true
          oc logs -l job-name=${{ env.JOB_JOB }} --tail=50 --follow

          # Results and exit code
          oc get job ${{ env.JOB_JOB }}

          if [ $(oc get job ${{ env.JOB_JOB }} -o jsonpath='{.status.ready}') -eq 0 ]; then
            echo "Job successful!"
            exit 0
          else
            echo "Job failed!"
            exit 1
          fi
