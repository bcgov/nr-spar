name: .Deploys

on:
  workflow_call:
    inputs:
      ### Required
      # Nothing! Only `secrets: inherit` is required
      ### Typical / recommended
      environment:
        description: GitHub/OpenShift environment; usually PR number, test or prod
        default: ''
        required: false
        type: string
      etl:
        description: Run the cronjob and verify results?  [true|false]
        default: false
        required: false
        type: boolean
      fluentbit_target:
        description: FluentBit target; usually development, test or production
        default: development
        required: false
        type: string
      tag:
        description: Container tag; usually PR number
        default: ${{ github.event.number }}
        required: false
        type: string
      target:
        description: Deployment target; usually PR number, test or prod
        default: ${{ github.event.number }}
        required: false
        type: string
      ### Usually a bad idea / not recommended
      timeout-minutes:
        description: 'Timeout minutes'
        default: 10
        required: false
        type: number

    outputs:
      triggered:
        description: 'Has a deployment has been triggered?'
        value: ${{ jobs.deploy.outputs.triggered }}

jobs:
  init:
    name: Deploy (init)
    environment: ${{ inputs.target }}
    outputs:
      mod-tag: ${{ steps.mod-tag.outputs.mod-tag }}
    runs-on: ubuntu-22.04
    steps:
      - name: Get PR Number Mod 50
        if: github.event_name == 'pull_request'
        id: mod-tag
        run: echo "mod-tag=$(( ${{ inputs.target }} % 50 ))" >> $GITHUB_OUTPUT

      - name: OpenShift Init
        uses: bcgov-nr/action-deployer-openshift@v2.3.0
        with:
          oc_namespace: ${{ vars.OC_NAMESPACE }}
          oc_server: ${{ vars.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          file: common/openshift.init.yml
          overwrite: true
          parameters:
            -p ZONE=${{ inputs.target }}
            -p ORACLE_USER='${{ vars.ORACLE_USER }}'
            -p ORACLE_PASSWORD='${{ secrets.ORACLE_PASSWORD }}'
            -p ORACLE_SERVICE='${{ vars.ORACLE_SERVICE }}'
            -p FORESTCLIENTAPI_KEY='${{ secrets.FORESTCLIENTAPI_KEY }}'

      - name: FluentBit
        if: inputs.fluentbit_target != 'development'
        uses: bcgov-nr/action-deployer-openshift@v2.3.0
        with:
          oc_namespace: ${{ vars.OC_NAMESPACE }}
          oc_server: ${{ vars.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          file: common/openshift.fluentbit.yml
          overwrite: true
          parameters:
            -p AWS_KINESIS_STREAM='${{ secrets.AWS_KINESIS_STREAM }}'
            -p AWS_KINESIS_ROLE_ARN='${{ secrets.AWS_KINESIS_ROLE_ARN }}'
            -p AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            -p AWS_ACCESS_KEY_SECRET='${{ secrets.AWS_ACCESS_KEY_SECRET }}'

  database:
    name: Deploy (database)
    environment: ${{ inputs.target }}
    runs-on: ubuntu-22.04
    steps:
      - name: Database
        uses: bcgov-nr/action-deployer-openshift@v2.3.0
        with:
          oc_namespace: ${{ vars.OC_NAMESPACE }}
          oc_server: ${{ vars.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          file: database/openshift.deploy.yml
          overwrite: false
          parameters:
            -p TAG=${{ inputs.tag }}
            -p ZONE=${{ inputs.target }}
            -p DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
            ${{ github.event_name == 'pull_request' && '-p DB_PVC_SIZE=192Mi' || '' }}

  deploy:
    name: Deploy
    environment: ${{ inputs.target }}
    needs: [database, init]
    outputs:
      triggered: ${{ steps.trigger.outputs.triggered }}
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ inputs.timeout-minutes }}
    strategy:
      matrix:
        name: [backend, frontend, oracle-api, sync]
        include:
          - name: backend
            file: backend/openshift.deploy.yml
            overwrite: true
            parameters:
              -p AWS_COGNITO_ISSUER_URI=https://cognito-idp.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.VITE_USER_POOLS_ID }}
              -p OPENSEARCH_ENV=${{ inputs.fluentbit_target == 'prod' && 'production' || inputs.fluentbit_target }}
            verification_path: "actuator/health"
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
            parameters:
              -p FAM_MODDED_ZONE=${{ github.event_name == 'pull_request' && needs.init.outputs.mod-tag || inputs.target }}
              -p VITE_SPAR_BUILD_VERSION=snapshot-${{ inputs.target || github.event.number }}
              -p VITE_USER_POOLS_ID=${{ vars.VITE_USER_POOLS_ID }}
              -p VITE_USER_POOLS_WEB_CLIENT_ID=${{ vars.VITE_USER_POOLS_WEB_CLIENT_ID }}
          - name: oracle-api
            file: oracle-api/openshift.deploy.yml
            overwrite: true
            parameters:
              -p AWS_COGNITO_ISSUER_URI=https://cognito-idp.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.VITE_USER_POOLS_ID }}
              -p OPENSEARCH_ENV=${{ inputs.fluentbit_target == 'prod' && 'production' || inputs.fluentbit_target }}
            verification_path: "actuator/health"
          - name: sync
            file: sync/openshift.deploy.yml
            overwrite: true
            parameters:
              -p TEST_MODE=${{ github.event_name == 'pull_request' && '1' || '0' }}
            # post_rollout: ${{ inputs.etl == 'true' && 'oc create job ${{ env.RUN_JOB }} --from=cronjob/${{ env.CRONJOB }}' || ''}}
            # triggers: ('sync/')

    steps:
      - uses: bcgov-nr/action-deployer-openshift@v2.3.0
        id: deploys
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ vars.OC_NAMESPACE }}
          oc_server: ${{ vars.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: ${{ matrix.overwrite }}
          penetration_test: false
          parameters:
            -p TAG=${{ inputs.tag }}
            -p ZONE=${{ inputs.target }}
            ${{ github.event_name == 'pull_request' && '-p MIN_REPLICAS=1' || '' }}
            ${{ github.event_name == 'pull_request' && '-p MAX_REPLICAS=2' || '' }}
            ${{ matrix.parameters }}
          post_rollout: ${{ matrix.post_rollout }}
          triggers: ${{ matrix.triggers }}
          verification_path: ${{ matrix.verification_path }}
          verification_retry_attempts: "5"
          verification_retry_seconds: "20"
      - id: trigger
        run: echo "triggered=${{ steps.deploys.outputs.triggered }}" >> $GITHUB_OUTPUT

  verify:
    name: Verify ETL
    if: inputs.etl == 'true'
    environment: ${{ inputs.target }}
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Override OpenShift version
        env:
          OC: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-4.13/openshift-client-linux.tar.gz
        run: |
          curl --silent ${{ env.OC }} | tar -xzvf - oc
          oc version
        working-directory: /usr/local/bin/

      - name: Job
        run: |
          # Run and verify job

          # Login
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ secrets.oc_namespace }} #Safeguard!

          # Create job
          CRONJOB=${{ github.event.repository.name }}-${{ inputs.target }}-sync
          RUN_JOB=${CRONJOB}-${{ github.run_number }}-${{ github.run_attempt}}
          oc create job ${RUN_JOB} --from=cronjob/${CRONJOB}

          # Follow
          oc wait --for=jsonpath='{.status.failed}'=4 job/${RUN_JOB} --timeout=10m || true
          oc logs -l job-name=${RUN_JOB} --tail=50 --follow

          # Results and exit code
          oc get job ${RUN_JOB}

          if [ $(oc get job ${RUN_JOB} -o jsonpath='{.status.ready}') -eq 0 ]; then
            echo "Job successful!"
          else
            echo "Job failed!"
            exit 1
          fi
