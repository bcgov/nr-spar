apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Product name
    value: nr-spar
  - name: COMPONENT
    description: Component name
    value: database
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: CPU_REQUEST
    value: 25m
  - name: MEMORY_REQUEST
    value: 512Mi
  - name: DB_PVC_SIZE
    description: Volume space available for data, e.g. 512Mi, 2Gi
    value: 1.8Gi

  ### Backup-Container starts here ###
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: ORG
    description: Organization name
    value: bcgov
  - name: CRONJOB_RESTORE_TAG
    description: Image tag for database restore cronjob; e.g. PR number, latest or prod
    value: prod

  - name: BACKUP_COMPONENT
    description: BACKUP_COMPONENT name
    value: database-backup
  - name: "DATABASE_DEFAULT_PORT"
    description: "The configured port for the database service"
    value: "5432"
  - name: "BACKUP_STRATEGY"
    description: "The strategy to use for backups; for example daily, or rolling."
    required: true
    value: "rolling"
  - name: "BACKUP_DIR"
    description: "The name of the root backup directory"
    required: true
    value: "/backups/"
  - name: "NUM_BACKUPS"
    description: "The number of backup files to be retained.  Used for the `daily` backup strategy.  Ignored when using the `rolling` backup strategy."
    required: false
    value: "5"
  - name: "DAILY_BACKUPS"
    description: "The number of daily backup files to be retained.  Used for the `rolling` backup strategy."
    required: false
    value: "7"
  - name: "WEEKLY_BACKUPS"
    description: "The number of weekly backup files to be retained.  Used for the `rolling` backup strategy."
    required: false
    value: "4"
  - name: "MONTHLY_BACKUPS"
    displayName: "Number of Monthly Backups to Retain"
    description: "The number of monthly backup files to be retained.  Used for the `rolling` backup strategy."
    required: false
    value: "1"
  - name: "JOB_SERVICE_ACCOUNT"
    description: "Name of the Service Account To Exeucte the Job As."
    value: "default"
    required: true
  - name: "SUCCESS_JOBS_HISTORY_LIMIT"
    description: "The number of successful jobs that will be retained"
    value: "5"
    required: true
  - name: "FAILED_JOBS_HISTORY_LIMIT"
    description: "The number of failed jobs that will be retained"
    value: "2"
    required: true
  - name: "JOB_BACKOFF_LIMIT"
    description: "The number of attempts to try for a successful job outcome"
    value: "0"
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Database Backup Volume Capacity
    name: DB_BACKUP_PVC_SIZE
    value: 100Mi
  - name: CRON_MINUTES
    description: Random number, 0-60, for scheduling cronjobs
    from: "[0-5]{1}[0-9]{1}"
    generate: expression
  - name: RANDOM_EXPRESSION
    description: Random expression to make sure deployments update
    from: "[a-zA-Z0-9]{32}"
    generate: expression
objects:
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_PVC_SIZE}
      storageClassName: netapp-file-standard
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
      template:
        metadata:
          name: ${NAME}-${ZONE}-${COMPONENT}
          labels:
            app: ${NAME}-${ZONE}
            deployment: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          volumes:
            - name: ${NAME}-${ZONE}-${COMPONENT}
              persistentVolumeClaim:
                claimName: ${NAME}-${ZONE}-${COMPONENT}
          containers:
            - name: ${NAME}-${ZONE}
              image: postgis/postgis:15-master
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - '-ce'
                    - exec pg_isready -U $POSTGRES_USER -d "dbname=$POSTGRES_DB" -h 127.0.0.1 -p 5432
                periodSeconds: 30
                timeoutSeconds: 10
              livenessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - '-ce'
                    - exec pg_isready -U $POSTGRES_USER -d "dbname=$POSTGRES_DB" -h 127.0.0.1 -p 5432
                periodSeconds: 30
                timeoutSeconds: 10
              env:
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-name
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-password
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-user
              volumeMounts:
                - name: ${NAME}-${ZONE}-${COMPONENT}
                  mountPath: /var/lib/postgresql
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        deployment: ${NAME}-${ZONE}-${COMPONENT}
      sessionAffinity: None
      type: ClusterIP

  ### Backup-Container starts here ###
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${DB_BACKUP_PVC_SIZE}"
      storageClassName: netapp-file-standard
  - kind: CronJob
    apiVersion: "batch/v1"
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
        cronjob: ${NAME}-${ZONE}
    spec:
      schedule: "${CRON_MINUTES} 8 * * *" # Run daily at 8:xx AM UTC
      concurrencyPolicy: "Replace"
      successfulJobsHistoryLimit: "${{SUCCESS_JOBS_HISTORY_LIMIT}}"
      failedJobsHistoryLimit: "${{FAILED_JOBS_HISTORY_LIMIT}}"
      jobTemplate:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            cronjob: ${NAME}-${ZONE}
        spec:
          backoffLimit: ${{JOB_BACKOFF_LIMIT}}
          template:
            metadata:
              labels:
                app: ${NAME}-${ZONE}
                cronjob: ${NAME}-${ZONE}
            spec:
              containers:
                - name: ${NAME}-${ZONE}
                  image: "bcgovimages/backup-container:latest"
                  command:
                    - "/bin/bash"
                    - "-c"
                    - "/backup.sh -1"
                  volumeMounts:
                    - mountPath: "${BACKUP_DIR}"
                      name: "backup"
                  env:
                    - name: BACKUP_DIR
                      value: "${BACKUP_DIR}"
                    - name: BACKUP_STRATEGY
                      value: "${BACKUP_STRATEGY}"
                      optional: true
                    - name: NUM_BACKUPS
                      value: "${NUM_BACKUPS}"
                      optional: true
                    - name: DAILY_BACKUPS
                      value: "${DAILY_BACKUPS}"
                      optional: true
                    - name: WEEKLY_BACKUPS
                      value: "${WEEKLY_BACKUPS}"
                      optional: true
                    - name: MONTHLY_BACKUPS
                      value: "${MONTHLY_BACKUPS}"
                      optional: true
                    - name: DATABASE_SERVICE_NAME
                      value: "${NAME}-${ZONE}-${COMPONENT}"
                    - name: DEFAULT_PORT
                      value: ${DATABASE_DEFAULT_PORT}
                    - name: POSTGRESQL_DATABASE
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}-${COMPONENT}
                          key: database-name
                    - name: DATABASE_USER
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}-${COMPONENT}
                          key: database-user
                    - name: DATABASE_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}-${COMPONENT}
                          key: database-password
                    - name: S3_BUCKET
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: s3-bucket
                    - name: S3_ENDPOINT
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: s3-endpoint
                    - name: S3_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: s3-password
                    - name: S3_USER
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: s3-user
              volumes:
                - name: backup
                  persistentVolumeClaim:
                    claimName: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
              restartPolicy: "Never"
              terminationGracePeriodSeconds: 30
              activeDeadlineSeconds: 1600
              dnsPolicy: "ClusterFirst"
              serviceAccountName: "${JOB_SERVICE_ACCOUNT}"
              serviceAccount: "${JOB_SERVICE_ACCOUNT}"
