apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "NR SPAR Backend"
    tags: "nr-spar-backend,backend"
    iconClass: icon-java
labels:
  app: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nr-spar
  - name: COMPONENT
    description: Component name
    value: backend
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: TAG
    description: Image tag; e.g. PR number, latest or prod
    required: true
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: ORG
    description: Organization name
    value: bcgov
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: ALLOWED_ORIGINS
    description: Sets all the allowed request origins
    value: "http://localhost:300*,https://*.apps.silver.devops.gov.bc.ca,https://*.nrs.gov.bc.ca"
  - name: FORESTCLIENTAPI_ADDRESS
    value: "https://nr-forest-client-api-prod.api.gov.bc.ca/api"
  - name: CPU_REQUEST
    value: 50m
  - name: CPU_LIMIT
    value: 75m
  - name: MEMORY_REQUEST
    value: 100Mi
  - name: MEMORY_LIMIT
    value: 350Mi
  - name: MIN_REPLICAS
    description: The minimum amount of replicas for the horizontal pod autoscaler.
    value: "3"
  - name: MAX_REPLICAS
    description: The maximum amount of replicas for the horizontal pod autoscaler.
    value: "5"
  - name: OPENSEARCH_ENV
    description: Backend environment for OpenSearch. # One of: development, test, production
    required: true
    value: development
  - name: DB_POOL_CONN_TIMEOUT
    description: Maximum number of milliseconds that a client will wait for a connection from the pool.
    value: "90000"
  - name: DB_POOL_IDLE_TIMEOUT
    description: Maximum amount of milliseconds that a connection is allowed to sit idle in the pool.
    value: "0"
  - name: DB_POOL_MAX_LIFETIME
    description: Maximum lifetime of a connection in the pool.
    value: "1800000"
  - name: AWS_COGNITO_ISSUER_URI
    description: AWS Cognito JWT Server URI
    required: true
objects:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deployment: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - name: ${NAME}-${ZONE}
              image: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT}:${TAG}
              imagePullPolicy: Always
              volumeMounts:
                - name: ${NAME}-${ZONE}-fluentbit-logs
                  mountPath: /logs
              env:
                - name: NR_SPAR_BACKEND_VERSION
                  value: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT}:${TAG}
                - name: OPENSEARCH_ENV
                  value: ${OPENSEARCH_ENV}
                - name: ALLOWED_ORIGINS
                  value: ${ALLOWED_ORIGINS}
                - name: FORESTCLIENTAPI_ADDRESS
                  value: ${FORESTCLIENTAPI_ADDRESS}
                - name: ORACLE_SERVER_URL
                  value: https://${NAME}-${ZONE}-oracle-api.${DOMAIN}
                - name: FORESTCLIENTAPI_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-backend
                      key: forest-client-api-key
                - name: POSTGRES_HOST
                  value: ${NAME}-${ZONE}-database
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-name
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-password
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-user
                - name: DB_POOL_CONN_TIMEOUT
                  value: ${DB_POOL_CONN_TIMEOUT}
                - name: DB_POOL_IDLE_TIMEOUT
                  value: ${DB_POOL_IDLE_TIMEOUT}
                - name: DB_POOL_MAX_LIFETIME
                  value: ${DB_POOL_MAX_LIFETIME}
                - name: AWS_COGNITO_ISSUER_URI
                  value: ${AWS_COGNITO_ISSUER_URI}
              ports:
                - containerPort: 8090
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                successThreshold: 1
                failureThreshold: 5
                httpGet:
                  path: /actuator/health
                  port: 8090
                  scheme: HTTP
                initialDelaySeconds: 20
                periodSeconds: 15
                timeoutSeconds: 10
              livenessProbe:
                successThreshold: 1
                failureThreshold: 5
                httpGet:
                  path: /actuator/health
                  port: 8090
                  scheme: HTTP
                initialDelaySeconds: 20
                periodSeconds: 30
                timeoutSeconds: 10
          volumes:
            - name: ${NAME}-${ZONE}-fluentbit-logs
              persistentVolumeClaim:
                claimName: ${NAME}-${ZONE}-fluentbit-logs
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 8090-tcp
          protocol: TCP
          port: 80
          targetPort: 8090
      selector:
        deployment: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 8090-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: Deployment
        name: ${NAME}-${ZONE}-${COMPONENT}
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 80
