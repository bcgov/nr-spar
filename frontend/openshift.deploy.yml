apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nr-spar-webapp
  - name: COMPONENT
    description: Component name
    value: frontend
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: ORG_NAME
    description: Organization name
    value: bcgov
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: 15m
  - name: CPU_LIMIT
    value: 30m
  - name: MEMORY_REQUEST
    value: 30Mi
  - name: MEMORY_LIMIT
    value: 50Mi
  - name: MIN_REPLICAS
    description: The minimum amount of replicas for the horizontal pod autoscaler.
    value: "3"
  - name: MAX_REPLICAS
    description: The maximum amount of replicas for the horizontal pod autoscaler.
    value: "5"
  - name: VITE_AWS_DOMAIN
    description: FAM on AWS domain
    value: https://prod-fam-user-pool-domain.auth.ca-central-1.amazoncognito.com
  - name: VITE_SPAR_BUILD_VERSION
    description: Current sample app release version
    required: true
  - name: VITE_NRSPARWEBAPP_VERSION
    description: VITE_NRSPARWEBAPP_VERSION
    required: true
  - name: VITE_ORACLE_SERVER_URL
    description: Oracle server (can change!)
    value: https://nr-spar-test-oracle-api.apps.silver.devops.gov.bc.ca
  - name: LOG_LEVEL
    description: Caddy log level (debug, info, warn, error, panic, fatal)
    value: "info"
  - name: VITE_USER_POOLS_ID
    description: AWS Cognito Pools ID
    required: true
  - name: VITE_USER_POOLS_WEB_CLIENT_ID
    description: AWS Cognito Web Client ID
    required: true
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${ORG_NAME}/${NAME}/${COMPONENT}:${ZONE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              securityContext:
                capabilities:
                  add: ["NET_BIND_SERVICE"]
              env:
                - name: VITE_AWS_DOMAIN
                  value: ${VITE_AWS_DOMAIN}
                - name: VITE_SPAR_BUILD_VERSION
                  value: ${VITE_SPAR_BUILD_VERSION}
                - name: VITE_SERVER_URL
                  value: https://${NAME}-${ZONE}-backend.${DOMAIN}
                - name: VITE_NRSPARWEBAPP_VERSION
                  value: ${VITE_NRSPARWEBAPP_VERSION}
                - name: VITE_ORACLE_SERVER_URL
                  value: ${VITE_ORACLE_SERVER_URL}
                - name: LOG_LEVEL
                  value: ${LOG_LEVEL}
                - name: VITE_USER_POOLS_ID
                  value: ${VITE_USER_POOLS_ID}
                - name: VITE_USER_POOLS_WEB_CLIENT_ID
                  value: ${VITE_USER_POOLS_WEB_CLIENT_ID}
                - name: VITE_ZONE
                  value: ${ZONE}
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                successThreshold: 1
                failureThreshold: 15
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 30
                timeoutSeconds: 10
              livenessProbe:
                successThreshold: 1
                failureThreshold: 15
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 30
                timeoutSeconds: 10
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        name: ${NAME}-${ZONE}-${COMPONENT}
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 80
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-from-openshift-ingress
      labels:
        template: openshift-test
    spec:
      podSelector: {}
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
      policyTypes:
        - Ingress
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-same-namespace
      labels:
        template: nr-spar-frontend-network-security-policy
    spec:
      podSelector: {}
      ingress:
        - from:
            - podSelector: {}
      policyTypes:
        - Ingress
